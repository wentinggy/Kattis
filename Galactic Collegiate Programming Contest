import java.io.*;
import java.util.*;

class team {
    public int teamId;
    public int numSolved;
    public int totalPenalty;

    team(int teamId) {
        this.teamId = teamId;
    }

    public int compareTo(team t1) {
        return (numSolved == t1.numSolved && totalPenalty == t1.totalPenalty)
        ? t1.teamId - teamId
        : (numSolved == t1.numSolved)
        ? t1.totalPenalty - totalPenalty
        : numSolved - t1.numSolved; 
    }
}

class gcpc {
    public static void main(String[] args) {
        Kattio io = new Kattio(System.in, System.out);
        int numTeams = io.getInt();
        int numEvents = io.getInt();

        AVL score = new AVL();
        team[] arr = new team[numTeams];
        //the avl starts from 0 but the team number start counting from 1
        //so if you want to use the team number as indices then you either +1 to the 
        //AVL or -1 from the team number. If you +1 to the team number
        //then you will have 0 to N but 0 is unused
        //NOW WE USE TEAMNUM - 1 MEANS EACH TEAM WILL START FROM INDEX 0

        for (int i= 0; i < numTeams; i++ ) {
            arr[i] = new team(i);
            score.insert(arr[i]);
        }

        for (int j = 0; j < numEvents; j++) {
            int teamNum = io.getInt() - 1;
            int penalty = io.getInt();
            team t = arr[teamNum];
            score.delete(t);
            t.numSolved++;
            t.totalPenalty += penalty;
            score.insert(t);
            //team 1 is rank 0 
            io.println(score.rank(arr[0]));
        }
        io.close();
    }     
}


// Every vertex in this BST is a Java Class
//lecture 10 BST code
class AVLVertex {
    // all these attributes remain public to slightly simplify the code
    public AVLVertex parent, left, right;
    public team key; //key is of attribute team 
    public int height;
    public int size; 

    AVLVertex(team v) { 
        this.key = v; 
        this.parent = null;
        this.left = null;
        this.right = null; 
        this.height = 0; 
        this.size = 0; 
    }
}
  
class AVL {
    public AVLVertex root;
  
    public AVL() { root = null; }
  
    // public method called to search for a value v. 
    // Return v if it is found in the BST otherwise return -1.
    // Here the assumption is that -1 is never a valid key value.
    public team search(team key) {
      AVLVertex res = search(root, key);
      if (res == null) {
          return null;
       } else {
            return res.key;
        }
    }
  
    // helper method to perform search
    public AVLVertex search(AVLVertex T, team key) {
        if (T == null) {
            return null;                     // not found
        } else if (T.key.compareTo(key) == 0) { 
            return T;                        // found
        } else if (T.key.compareTo(key) < 0) {  
            return search(T.right, key);       // search to the right
        } else {   
            return search(T.left, key); // search to the left
        }       
    }

    public int rank(team key) {return rank(root, key);}

    public int rank(AVLVertex T, team key) {
        if (T == null)  return 0;

        if (key.compareTo(T.key) < 0) {
            return size(T.right) + rank(T.left, key) + 1;
        } else if (key.compareTo(T.key) > 0) {
            return rank(T.right, key);
        } else {
            return size(T.right) + 1;
        }
    }

    public int size() {
        return size(root);
    }
    public int size(AVLVertex T) {
        return (T == null)
        ? 0
        : T.size;
    }

    public int height() { return height(root);}

    public int height(AVLVertex T) {
        return (T == null)
        ? 0
        :T.height;
    }
    
    // public method called to find Minimum key value in BST
    public team findMin() { return findMin(root); }
  
    // helper method to perform findMin
    // Question: What happens if BST is empty?
    public team findMin(AVLVertex T) {
      if (T.left == null) {
          return T.key; // this is the min           
      } else {
           return findMin(T.left); // go to the left
        }           
    }
  
    // public method called to find Maximum key value in BST
    public team findMax() { return findMax(root); }
  
    // helper method to perform findMax
    // Question: Again, what happens if BST is empty?
    public team findMax(AVLVertex T) {
      if (T.right == null) {
          return T.key;                   // this is the max
      } else {
           return findMax(T.right);        // go to the right
        }
    }

    // public method to balance a given root in the AVL
    public AVLVertex balance() { return balance(root); }
     // helper method to perform balance
    // Question: Again, what happens if BST is empty?
    public AVLVertex balance(AVLVertex T) {
        if (T == null) {
            return null; 
        }
        if (balanceFactor(T) == 2) {
            if (balanceFactor(T.left) == -1) {
                T.left = leftRotate(T.left);
            }
            T = rightRotate(T);
        } else if (balanceFactor(T) == -2) {
            if (balanceFactor(T.right) == 1) {
                T.right = rightRotate(T.right);
            }
            T = leftRotate(T);
        }
        return T;
    }

    public int balanceFactor(AVLVertex T) {
        return height(T.left) - height(T.right);
    }

    //lectre 10 slide 33
    public AVLVertex leftRotate(AVLVertex T) { 
        AVLVertex w = T.right; 
        w.parent = T.parent;
        T.parent = w; 
        T.right = w.left; 
        if(w.left != null) w.left.parent = T;
        w.left = T; 
        //update the height of T and then w
        T.height = Math.max(height(T.left), height(T.right)) + 1; 
        w.height = Math.max(height(w.left), height(w.right)) + 1; 
        //update the size of T and then w
        T.size = size(T.left) + size(T.right) + 1; 
        w.size = size(w.left) + size(w.right) + 1; 
        
        return w;
    }

    public AVLVertex rightRotate(AVLVertex T) {
        AVLVertex w = T.left; 
        w.parent = T.parent;
        T.parent = w; 
        T.left = w.right; 
        if(w.right != null) w.right.parent = T;
        w.right = T; 

        //update the height of T and then w
        T.height = Math.max(height(T.left), height(T.right)) + 1; 
        w.height = Math.max(height(w.left), height(w.right)) + 1; 
        //update the size of T and then w
        T.size = size(T.left) + size(T.right) + 1; 
        w.size = size(w.left) + size(w.right) + 1; 
        
        return w;
    }

    // public method to find successor to given value v in BST.
    public team successor(team v) { 
      AVLVertex vPos = search(root, v);
      if (vPos == null) {
        return null; 
    } else {
        return successor(vPos);
        }
    }

    // helper recursive method to find successor to for a given vertex T in BST
    public team successor(AVLVertex T) {
      if (T.right != null)                       // this subtree has right subtree
        return findMin(T.right);  // the successor is the minimum of right subtree
      else {
        AVLVertex par = T.parent;
        // if par(ent) is not root and cur(rent) is its right children
        while ((par != null) && (T == par.right)) {
          T = par;                                         // continue moving up
          par = T.parent;
        }
        if (par == null) {
            return null; 
        } else {
            return par.key; // this is the successor of T
        }           
      }
    }
  
    // public method to find predecessor to given value v in BST
    public team predecessor(team v) { 
      AVLVertex vPos = search(root, v);
      if (vPos == null) {
        return null; 
    } else {
        return successor(vPos);
        }
    }
  
    // helper recursive method to find predecessor to for a given vertex T in BST
    public team predecessor(AVLVertex T) {
      if (T.left != null)                         // this subtree has left subtree
        return findMax(T.left);  // the predecessor is the maximum of left subtree
      else {
        AVLVertex par = T.parent;
        AVLVertex cur = T;
        // if par(ent) is not root and cur(rent) is its left children
        while ((par != null) && (cur == par.left)) { 
          cur = par;                                         // continue moving up
          par = cur.parent;
        }
        if (par == null) {
            return null;
        } else {
            return par.key;           // this is the successor of T
            }
        }
    }
  
    // public method called to perform inorder traversal
    public void inorder() { 
      inorder(root);
      System.out.println();
    }
  
    // helper method to perform inorder traversal
    public void inorder(AVLVertex T) {
      if (T == null) return;
      inorder(T.left);                               // recursively go to the left
      System.out.printf(" %d", T.key);                      // visit this BST node
      inorder(T.right);                             // recursively go to the right
    }
  
    // public method called to insert a new key with value v into BST
    public void insert(team key) { root = insert(root, key); }
  
    // helper recursive method to perform insertion of new vertex into BST
    public AVLVertex insert(AVLVertex T, team key) {
      if (T == null) {
          // insertion point is found
          AVLVertex current = new AVLVertex(key);
          //update the size of the vertex
          current.size = 1;
          return current;
      }    
  
      if (T.key.compareTo(key) < 0) {                                      // search to the right
        T.right = insert(T.right, key);
        T.right.parent = T;
      }
      else if (T.key.compareTo(key) > 0) {                                                 // search to the left
        T.left = insert(T.left, key);
        T.left.parent = T;
      }
      T.size = size(T.left) + size(T.right) + 1; 
      T.height = Math.max(height(T.left), height(T.right)) + 1;

      return balance(T);                                         // return the updated BST
    }  
  
    // public method to delete a vertex containing key with value v from BST
    public void delete(team v) { root = delete(root, v); }
  
    // helper recursive method to perform deletion 
    public AVLVertex delete(AVLVertex T, team v) {
      if (T == null)  return T;              // cannot find the item to be deleted
  
      if (T.key.compareTo(v) < 0)                                    // search to the right
        T.right = delete(T.right, v);
      else if (T.key.compareTo(v) > 0)                               // search to the left
        T.left = delete(T.left, v);
      else {                                            // this is the node to be deleted
        if (T.left == null && T.right == null)                   // this is a leaf
          T = null;                                      // simply erase this node
        else if (T.left == null && T.right != null) {   // only one child at right        
          T.right.parent = T.parent;
          T = T.right;                                                 // bypass T        
        }
        else if (T.left != null && T.right == null) {    // only one child at left        
          T.left.parent = T;
          T = T.left;                                                  // bypass T        
        }
        else {                                 // has two children, find successor
          team successorV = successor(v);
          T.key = successorV;         // replace this key with the successor's key
          T.right = delete(T.right, successorV);      // delete the old successorV
        }
      }
      if (T != null) {
        T.size = size(T.left) + size(T.right) + 1; 
        T.height = Math.max(height(T.left), height(T.right)) + 1;
    }
    return balance(T); //return the updated AVL/BST
    }
}

class Kattio extends PrintWriter {
    public Kattio(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Kattio(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }
    
    public boolean hasMoreTokens() {
        return peekToken() != null;
    }
    
    public int getInt() {
        return Integer.parseInt(nextToken());
    }
    
    public double getDouble() {
        return Double.parseDouble(nextToken());
    }
    
    public long getLong() {
        return Long.parseLong(nextToken());
    }
    
    public String getWord() {
        return nextToken();
    }
    
    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;
    
    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }
    
    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }
}
