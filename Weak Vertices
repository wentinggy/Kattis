import java.io.*;
import java.util.*;

class vertices {
    public static void main(String[] args) {
        Kattio io = new Kattio(System.in, System.out);

        int num = io.getInt();
        while (num != -1) {
            //-1 means end of input
            int[][] adjMatrix = new int[num][num];
            for (int i = 0; i < num; i ++) {
                int[] arr = new int[num];
                for (int j = 0; j < num; j++) {
                    arr[j] = io.getInt();
                    adjMatrix[i][j] = arr[j];
                }
            }


        for (int i = 0; i < num; i++) {
            String weak = "yes";
            for (int j = 0; j < num; j++) {
                for (int k = 0; k < num; k++) {       
                    if (adjMatrix[i][j] == 1 && adjMatrix[i][k] == 1 && adjMatrix[j][k] == 1) {
                        //means they have a connection between all 3, forming triangles
                        weak = "no";
                    }            
                }
            }
            if (weak == "yes") {
               io.print(i + " ");
            }
        }
        io.println();
        num = io.getInt();

        }
        io.close();
    }
}

class Kattio extends PrintWriter {
    public Kattio(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Kattio(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }
    
    public boolean hasMoreTokens() {
        return peekToken() != null;
    }
    
    public int getInt() {
        return Integer.parseInt(nextToken());
    }
    
    public double getDouble() {
        return Double.parseDouble(nextToken());
    }
    
    public long getLong() {
        return Long.parseLong(nextToken());
    }
    
    public String getWord() {
        return nextToken();
    }
    
    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;
    
    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }
    
    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }
}
