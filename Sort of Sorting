import java.io.*;
import java.util.*;

public class lab2{
    public static void main(String[] args){
        Kattio io = new Kattio(System.in, System.out);
        //introduce PrintWriter
        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        Boolean passing = true; //dummy variable

        while (passing) {

            int totalnum = io.getInt();
            ArrayList<String> nameArr = new ArrayList<String>();
            for (int i = 0; i < totalnum; i++) {
                nameArr.add(io.getWord());
            }

            //use substring

            Collections.sort(nameArr, Comparator.comparing(x -> x.substring(0,2)));
            for (int i = 0; i < nameArr.size(); i++ ) {
                pw.println(nameArr.get(i));
            }
            pw.println(" ");
            pw.flush();

            if(totalnum == 0) {
                passing = false;
            }
        }

        io.close();
    }
}




class Kattio extends PrintWriter {
    public Kattio(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Kattio(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }
}
