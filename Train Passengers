import java.io.*;
import java.util.*;

public class ass1a{
    public static void main(String[] args){
        //use Kattio Io scanner to increase speed
        Kattio io = new Kattio(System.in, System.out);

        // first line of input
        int totalCapacity = io.getInt();
        int numOfStations = io.getInt();

        //introduce PrintWriter
        PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //create an arraylist of num of ppl that left the train, entered the train and stayed at a station
        ArrayList<Integer> numLeftTrainArr = new ArrayList<Integer>();
        ArrayList<Integer> numEnteredArr = new ArrayList<Integer>();
        ArrayList<Integer> numStayedArr = new ArrayList<Integer>();

        while (io.hasMoreTokens()) {
            numLeftTrainArr.add(io.getInt());
            numEnteredArr.add(io.getInt());
            numStayedArr.add(io.getInt());
        }

        int numLeftTrain = 0;
        int numEntered = 0;
        int numStayed = 0;
        int passengerInTrain = 0;
        String result = "possible"; //default dummy value

        for (int i = 0; i < numOfStations; i++) {
            numLeftTrain = numLeftTrainArr.get(i);
            numEntered = numEnteredArr.get(i);
            numStayed = numStayedArr.get(i);

            //case 1: number of passengers that left the train is greater than number of original passengers in the train
            if (numLeftTrain > passengerInTrain) {
                result = "impossible";
            }

            //passengers in train = passengers entered - passengers that left the train
            passengerInTrain += numEntered - numLeftTrain;

            //case 2: passengers in train is below 0, a negative number
            if (passengerInTrain < 0){
                result = "impossible";
                //number of people in the train exceeded the capacity 
            } else if (passengerInTrain > totalCapacity) {
                result = "impossible"; 

                //case 4: passengers waited in vain 
            } else if (passengerInTrain != totalCapacity && numStayed > 0) {
                result = "impossible";
                //case 5: passenger waiting for the train at the last station
            } else if (numStayedArr.get(numOfStations-1) > 0) {
                result = "impossible";
            }
        }

        //case 6: train did not start empty 
        if (passengerInTrain != 0) {
            result = "impossible";
        }

        pw.println(result);
        pw.flush();

        io.close();
    }
}

class Kattio extends PrintWriter {
    public Kattio(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Kattio(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }
}
